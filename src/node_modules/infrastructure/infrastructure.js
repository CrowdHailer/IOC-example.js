// Maybe require('./infrastructure')
'use strict';

function Infrastructure () {
    this.services = {};
    this.features = {};
    this._global = null;
}

Infrastructure.prototype.useService = function (name, factory, options) {
    // separate services object
    // this.services.add(factory, options)
    // Throws custom error
    this.services[name] = {
        factory: factory,
        options: options,
        instance: null
    };
};

Infrastructure.prototype.addFeature = function (name, factory, options) {
    // separate features object
    // this.features.add(factory, options)
    // Throws custom error
    this.features[name] = {
        factory: factory,
        options: options,
        // instance: null
    };
};

Infrastructure.prototype.startFeature = function (name) {
    var feature = this.features[name];
    var element = this._root.querySelector('[data-feature~='+name+']');
    feature.factory(element, this);
};

Infrastructure.prototype.getService = function (name) {
    // separate services object
    // fetch for now retrieve for later
    // this.services.get(factory, options)
    // Throws custom error
    var service = this.services[name],
        instance = service.instance,
        application = this;

    if (instance) { return instance; }

    instance = service.factory(application, service.options);
    service.instance = instance;

    return instance;
};

Infrastructure.prototype.getGlobal = function (name) {
    // make this method on instances and then global truly private
    var _global = this._global;
    if (name in _global) {
        return _global[name];
    } else {
        return null;
    }
};

module.exports = function () {
    return new Infrastructure();
};
