// Maybe require('./infrastructure')
'use strict';

var Context = require('./context');

function Infrastructure () {
    this.services = {};
    this.features = {};
    this.context = Context.create(this);
    var global = null;
    var root = null;

    this.init = function (window, rootElement, options) {
        global = window;
        root = rootElement;

        var moduleElements = root.querySelectorAll('[data-feature]');

		for (var i = 0, len = moduleElements.length; i < len; i++) {
            var el = moduleElements[i];
            var featureName = el.dataset.feature;
            this.startFeature(featureName);
		}
    };

    this.getGlobal = function (name) {
        if (name in global) { return global[name]; }

        // default return null
        return null;
    };

    this.getRoot = function () {
        return root;
    };
}

// serviceName
Infrastructure.prototype.useService = function (name, factory, options) {
    // separate services object
    // this.services.add(factory, options)
    // Throws custom error
    this.services[name] = {
        factory: factory,
        options: options,
        instance: null
    };

    var exports = options.exports;

    if (exports) {
        var method = exports[0];
        var infrastructure = this;
        this.context[method] = function () {
            var instance = infrastructure.getService(name);
            instance[method].apply(instance, arguments);
        };
    }
};

Infrastructure.prototype.addFeature = function (name, factory, options) {
    // separate features object
    // this.features.add(factory, options)
    // Throws custom error
    this.features[name] = {
        factory: factory,
        options: options,
        // instance: null
    };
};

Infrastructure.prototype.startFeature = function (name) {
    var feature = this.features[name];
    var element = this.getRoot().querySelector('[data-feature~='+name+']');

    feature.factory(element, this.context);
};

Infrastructure.prototype.getService = function (name) {
    // separate services object
    // fetch for now retrieve for later
    // this.services.get(factory, options)
    // Throws custom error
    var service = this.services[name],
        instance = service.instance,
        application = this;

    if (instance) { return instance; }

    instance = service.factory(application, service.options);
    service.instance = instance;

    return instance;
};

// Infrastructure.prototype.

module.exports = {
    create: function () {
        return new Infrastructure();
    }
};
